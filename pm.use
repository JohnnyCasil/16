16/wf3d8086/contigsc.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/contigsc.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/id_pm.c://	PM_SetMainMemPurge() - Sets the purge level for all allocated main memory
16/wf3d8086/id_pm.c://		blocks. This shouldn't be called directly - the PM_LockMainMem() and
16/wf3d8086/id_pm.c://		PM_UnlockMainMem() macros should be used instead.
16/wf3d8086/id_pm.c:PM_SetMainMemPurge(int level)
16/wf3d8086/id_pm.c://	PM_CheckMainMem() - If something besides the Page Mgr makes requests of
16/wf3d8086/id_pm.c://	This routine now calls PM_LockMainMem() to make sure that any allocation
16/wf3d8086/id_pm.c://		of the other blocks. Because PM_LockMainMem() is called,
16/wf3d8086/id_pm.c://		PM_UnlockMainMem() needs to be called before any other part of the
16/wf3d8086/id_pm.c:PM_CheckMainMem(void)
16/wf3d8086/id_pm.c:	PM_LockMainMem();
16/wf3d8086/id_pm.c://		necessary to make requests of the Memory Mgr, PM_UnlockMainMem()
16/wf3d8086/id_pm.c:		Quit("PM_SetupMainMem: Not enough main memory");
16/wf3d8086/id_pm.c://	PM_GetPageAddress() - Returns the address of a given page
16/wf3d8086/id_pm.c:PM_GetPageAddress(int pagenum)
16/wf3d8086/id_pm.c:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wf3d8086/id_pm.c:	addr = PM_GetPageAddress(orig);
16/wf3d8086/id_pm.c://	PM_GetPage() - Returns the address of the page, loading it if necessary
16/wf3d8086/id_pm.c:PM_GetPage(int pagenum)
16/wf3d8086/id_pm.c:		Quit("PM_GetPage: Invalid page request");
16/wf3d8086/id_pm.c:	if (!(result = PM_GetPageAddress(pagenum)))
16/wf3d8086/id_pm.c:			result = PM_GetPageAddress(pagenum);
16/wf3d8086/id_pm.c://	PM_SetPageLock() - Sets the lock type on a given page
16/wf3d8086/id_pm.c:PM_SetPageLock(int pagenum,PMLockType lock)
16/wf3d8086/id_pm.c:		Quit("PM_SetPageLock: Locking/unlocking non-sound page");
16/wf3d8086/id_pm.c://	PM_Preload() - Loads as many pages as possible into all types of memory.
16/wf3d8086/id_pm.c:PM_Preload(boolean (*update)(word current,word total))
16/wf3d8086/id_pm.c:			Quit ("PM_Preload: Pages>=ChunksInFile");
16/wf3d8086/id_pm.c:		PM_GetPage(page);
16/wf3d8086/id_pm.c:		addr = PM_GetPage(oogypage);
16/wf3d8086/id_pm.c:			Quit("PM_Preload: XMS buffer failed");
16/wf3d8086/id_pm.c:				Quit ("PM_Preload: Pages>=ChunksInFile");
16/wf3d8086/id_pm.c:				Quit("PM_Preload: Exceeded XMS pages");
16/wf3d8086/id_pm.c:				Quit("PM_Preload: Page too long");
16/wf3d8086/id_pm.c://	PM_NextFrame() - Increments the frame counter and adjusts the thrash
16/wf3d8086/id_pm.c:PM_NextFrame(void)
16/wf3d8086/id_pm.c:			sprintf(buf,"PM_NextFrame: Page %d is locked",i);
16/wf3d8086/id_pm.c://	PM_Reset() - Sets up caching structures
16/wf3d8086/id_pm.c:PM_Reset(void)
16/wf3d8086/id_pm.c://	PM_Startup() - Start up the Page Mgr
16/wf3d8086/id_pm.c:PM_Startup(void)
16/wf3d8086/id_pm.c:		Quit("PM_Startup: No main or EMS");
16/wf3d8086/id_pm.c:	PM_Reset();
16/wf3d8086/id_pm.c://	PM_Shutdown() - Shut down the Page Mgr
16/wf3d8086/id_pm.c:PM_Shutdown(void)
16/wf3d8086/id_pm.h:#define	PM_GetSoundPage(v)	PM_GetPage(PMSoundStart + (v))
16/wf3d8086/id_pm.h:#define	PM_GetSpritePage(v)	PM_GetPage(PMSpriteStart + (v))
16/wf3d8086/id_pm.h:#define	PM_LockMainMem()	PM_SetMainMemPurge(0)
16/wf3d8086/id_pm.h:#define	PM_UnlockMainMem()	PM_SetMainMemPurge(3)
16/wf3d8086/id_pm.h:extern	void	PM_Startup(void),
16/wf3d8086/id_pm.h:				PM_Shutdown(void),
16/wf3d8086/id_pm.h:				PM_Reset(void),
16/wf3d8086/id_pm.h:				PM_Preload(boolean (*update)(word current,word total)),
16/wf3d8086/id_pm.h:				PM_NextFrame(void),
16/wf3d8086/id_pm.h:				PM_SetPageLock(int pagenum,PMLockType lock),
16/wf3d8086/id_pm.h:				PM_SetMainPurge(int level),
16/wf3d8086/id_pm.h:				PM_CheckMainMem(void);
16/wf3d8086/id_pm.h:extern	memptr	PM_GetPageAddress(int pagenum),
16/wf3d8086/id_pm.h:				PM_GetPage(int pagenum);		// Use this one to cache page
16/wf3d8086/id_pm.h:void PM_SetMainMemPurge(int level);
16/wf3d8086/id_sd.c:	addr = PM_GetSoundPage(page);
16/wf3d8086/id_sd.c:	PM_SetPageLock(PMSoundStart + page,pml_Locked);
16/wf3d8086/id_sd.c:		PM_SetPageLock(i + PMSoundStart,pml_Unlocked);
16/wf3d8086/id_sd.c:	PM_UnlockMainMem();
16/wf3d8086/id_sd.c:	PM_CheckMainMem();
16/wf3d8086/id_sd.c:	p = (word far *)MK_FP(PM_GetPage(ChunksInFile - 1),0);
16/wf3d8086/id_sd.c:	PM_UnlockMainMem();
Binary file 16/wf3d8086/obj/wolf3d.exe matches
16/wf3d8086/obj/wolf3d.map: 1A268H 1B44AH 011E3H ID_PM_TEXT         CODE
16/wf3d8086/obj/wolf3d.map: 1A26:0008 11E3 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wf3d8086/obj/wolf3d.map: 1A26:02F3       _PM_CheckMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:0CDE       _PM_GetPage
16/wf3d8086/obj/wolf3d.map: 1A26:080D       _PM_GetPageAddress
16/wf3d8086/obj/wolf3d.map: 1A26:1036       _PM_NextFrame
16/wf3d8086/obj/wolf3d.map: 1A26:0DD0       _PM_Preload
16/wf3d8086/obj/wolf3d.map: 1A26:10B0 idle  _PM_Reset
16/wf3d8086/obj/wolf3d.map: 1A26:02CA       _PM_SetMainMemPurge
16/wf3d8086/obj/wolf3d.map: 1A26:0DA0       _PM_SetPageLock
16/wf3d8086/obj/wolf3d.map: 1A26:11CF       _PM_Shutdown
16/wf3d8086/obj/wolf3d.map: 1A26:111E       _PM_Startup
16/wf3d8086/obj/wolf3d.map: 1A26:02CA       _PM_SetMainMemPurge
16/wf3d8086/obj/wolf3d.map: 1A26:02F3       _PM_CheckMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:080D       _PM_GetPageAddress
16/wf3d8086/obj/wolf3d.map: 1A26:0CDE       _PM_GetPage
16/wf3d8086/obj/wolf3d.map: 1A26:0DA0       _PM_SetPageLock
16/wf3d8086/obj/wolf3d.map: 1A26:0DD0       _PM_Preload
16/wf3d8086/obj/wolf3d.map: 1A26:1036       _PM_NextFrame
16/wf3d8086/obj/wolf3d.map: 1A26:10B0 idle  _PM_Reset
16/wf3d8086/obj/wolf3d.map: 1A26:111E       _PM_Startup
16/wf3d8086/obj/wolf3d.map: 1A26:11CF       _PM_Shutdown
16/wf3d8086/oldscale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/oldscale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wl_act2.c:	PM_UnlockMainMem ();
16/wf3d8086/wl_act2.c:	PM_CheckMainMem ();
16/wf3d8086/wl_debug.c:		addr = PM_GetPageAddress(i);
16/wf3d8086/wl_debug.c:				PM_GetPage(j);
16/wf3d8086/wl_debug.c:			PM_GetPage(i);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage+1);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:	PM_NextFrame();
16/wf3d8086/wl_game.c:	PM_UnlockMainMem();
16/wf3d8086/wl_game.c:	PM_CheckMainMem ();
16/wf3d8086/wl_game.c:	PM_CheckMainMem ();
16/wf3d8086/wl_game.c:		PM_CheckMainMem ();
16/wf3d8086/wl_game.c:			PM_CheckMainMem ();
16/wf3d8086/wl_inter.c:	PM_Preload (PreloadUpdate);
16/wf3d8086/wl_main.c:	PM_Shutdown ();
16/wf3d8086/wl_main.c:	PM_Startup ();
16/wf3d8086/wl_main.c:	PM_UnlockMainMem ();
16/wf3d8086/wl_menu.c:				PM_CheckMainMem ();
16/wf3d8086/wl_menu.c:				PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_play.c:	 PM_CheckMainMem ();
16/wf3d8086/wl_play.c:	 PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_scale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wl_scale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wolf3d.map: 19127H 1A286H 01160H ID_PM_TEXT         CODE
16/wf3d8086/wolf3d.map: 1912:0007 1160 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wf3d8086/wolf3d.map: 1912:02DF       _PM_CheckMainMem
16/wf3d8086/wolf3d.map: 1912:0C71       _PM_GetPage
16/wf3d8086/wolf3d.map: 1912:07BF       _PM_GetPageAddress
16/wf3d8086/wolf3d.map: 1912:0FBA       _PM_NextFrame
16/wf3d8086/wolf3d.map: 1912:0D60       _PM_Preload
16/wf3d8086/wolf3d.map: 1912:1034 idle  _PM_Reset
16/wf3d8086/wolf3d.map: 1912:02B8       _PM_SetMainMemPurge
16/wf3d8086/wolf3d.map: 1912:0D31       _PM_SetPageLock
16/wf3d8086/wolf3d.map: 1912:114B       _PM_Shutdown
16/wf3d8086/wolf3d.map: 1912:10A0       _PM_Startup
16/wf3d8086/wolf3d.map: 1912:02B8       _PM_SetMainMemPurge
16/wf3d8086/wolf3d.map: 1912:02DF       _PM_CheckMainMem
16/wf3d8086/wolf3d.map: 1912:07BF       _PM_GetPageAddress
16/wf3d8086/wolf3d.map: 1912:0C71       _PM_GetPage
16/wf3d8086/wolf3d.map: 1912:0D31       _PM_SetPageLock
16/wf3d8086/wolf3d.map: 1912:0D60       _PM_Preload
16/wf3d8086/wolf3d.map: 1912:0FBA       _PM_NextFrame
16/wf3d8086/wolf3d.map: 1912:1034 idle  _PM_Reset
16/wf3d8086/wolf3d.map: 1912:10A0       _PM_Startup
16/wf3d8086/wolf3d.map: 1912:114B       _PM_Shutdown
16/wf3d8086/wolfhack.c:	src = PM_GetPage(0);
16/wf3d8086/wolfhack.c:	src = PM_GetPage(1);
16/wolf3d/WOLFSRC/CONTIGSC.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/CONTIGSC.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_SetMainMemPurge() - Sets the purge level for all allocated main memory
16/wolf3d/WOLFSRC/ID_PM.C://		blocks. This shouldn't be called directly - the PM_LockMainMem() and
16/wolf3d/WOLFSRC/ID_PM.C://		PM_UnlockMainMem() macros should be used instead.
16/wolf3d/WOLFSRC/ID_PM.C:PM_SetMainMemPurge(int level)
16/wolf3d/WOLFSRC/ID_PM.C://	PM_CheckMainMem() - If something besides the Page Mgr makes requests of
16/wolf3d/WOLFSRC/ID_PM.C://	This routine now calls PM_LockMainMem() to make sure that any allocation
16/wolf3d/WOLFSRC/ID_PM.C://		of the other blocks. Because PM_LockMainMem() is called,
16/wolf3d/WOLFSRC/ID_PM.C://		PM_UnlockMainMem() needs to be called before any other part of the
16/wolf3d/WOLFSRC/ID_PM.C:PM_CheckMainMem(void)
16/wolf3d/WOLFSRC/ID_PM.C:	PM_LockMainMem();
16/wolf3d/WOLFSRC/ID_PM.C://		necessary to make requests of the Memory Mgr, PM_UnlockMainMem()
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_SetupMainMem: Not enough main memory");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_GetPageAddress() - Returns the address of a given page
16/wolf3d/WOLFSRC/ID_PM.C:PM_GetPageAddress(int pagenum)
16/wolf3d/WOLFSRC/ID_PM.C:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wolf3d/WOLFSRC/ID_PM.C:	addr = PM_GetPageAddress(orig);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_GetPage() - Returns the address of the page, loading it if necessary
16/wolf3d/WOLFSRC/ID_PM.C:PM_GetPage(int pagenum)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_GetPage: Invalid page request");
16/wolf3d/WOLFSRC/ID_PM.C:	if (!(result = PM_GetPageAddress(pagenum)))
16/wolf3d/WOLFSRC/ID_PM.C:			result = PM_GetPageAddress(pagenum);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_SetPageLock() - Sets the lock type on a given page
16/wolf3d/WOLFSRC/ID_PM.C:PM_SetPageLock(int pagenum,PMLockType lock)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_SetPageLock: Locking/unlocking non-sound page");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Preload() - Loads as many pages as possible into all types of memory.
16/wolf3d/WOLFSRC/ID_PM.C:PM_Preload(boolean (*update)(word current,word total))
16/wolf3d/WOLFSRC/ID_PM.C:			Quit ("PM_Preload: Pages>=ChunksInFile");
16/wolf3d/WOLFSRC/ID_PM.C:		PM_GetPage(page);
16/wolf3d/WOLFSRC/ID_PM.C:		addr = PM_GetPage(oogypage);
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PM_Preload: XMS buffer failed");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit ("PM_Preload: Pages>=ChunksInFile");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit("PM_Preload: Exceeded XMS pages");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit("PM_Preload: Page too long");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_NextFrame() - Increments the frame counter and adjusts the thrash
16/wolf3d/WOLFSRC/ID_PM.C:PM_NextFrame(void)
16/wolf3d/WOLFSRC/ID_PM.C:			sprintf(buf,"PM_NextFrame: Page %d is locked",i);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Reset() - Sets up caching structures
16/wolf3d/WOLFSRC/ID_PM.C:PM_Reset(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Startup() - Start up the Page Mgr
16/wolf3d/WOLFSRC/ID_PM.C:PM_Startup(void)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_Startup: No main or EMS");
16/wolf3d/WOLFSRC/ID_PM.C:	PM_Reset();
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Shutdown() - Shut down the Page Mgr
16/wolf3d/WOLFSRC/ID_PM.C:PM_Shutdown(void)
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_GetSoundPage(v)	PM_GetPage(PMSoundStart + (v))
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_GetSpritePage(v)	PM_GetPage(PMSpriteStart + (v))
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_LockMainMem()	PM_SetMainMemPurge(0)
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_UnlockMainMem()	PM_SetMainMemPurge(3)
16/wolf3d/WOLFSRC/ID_PM.H:extern	void	PM_Startup(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Shutdown(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Reset(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Preload(boolean (*update)(word current,word total)),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_NextFrame(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_SetPageLock(int pagenum,PMLockType lock),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_SetMainPurge(int level),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_CheckMainMem(void);
16/wolf3d/WOLFSRC/ID_PM.H:extern	memptr	PM_GetPageAddress(int pagenum),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_GetPage(int pagenum);		// Use this one to cache page
16/wolf3d/WOLFSRC/ID_PM.H:void PM_SetMainMemPurge(int level);
16/wolf3d/WOLFSRC/ID_SD.C:	addr = PM_GetSoundPage(page);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_SetPageLock(PMSoundStart + page,pml_Locked);
16/wolf3d/WOLFSRC/ID_SD.C:		PM_SetPageLock(i + PMSoundStart,pml_Unlocked);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/ID_SD.C:	PM_CheckMainMem();
16/wolf3d/WOLFSRC/ID_SD.C:	p = (word far *)MK_FP(PM_GetPage(ChunksInFile - 1),0);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/OLDSCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/OLDSCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/WL_ACT2.C:	PM_UnlockMainMem ();
16/wolf3d/WOLFSRC/WL_ACT2.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_DEBUG.C:		addr = PM_GetPageAddress(i);
16/wolf3d/WOLFSRC/WL_DEBUG.C:				PM_GetPage(j);
16/wolf3d/WOLFSRC/WL_DEBUG.C:			PM_GetPage(i);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage+1);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:	PM_NextFrame();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:			PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_INTER.C:	PM_Preload (PreloadUpdate);
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_Shutdown ();
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_Startup ();
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_UnlockMainMem ();
16/wolf3d/WOLFSRC/WL_MENU.C:				PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_MENU.C:				PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:	 PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:	 PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_SCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/WL_SCALE.C:	shape = PM_GetSpritePage (shapenum);
Binary file 16/wolf3d/WOLFSRC/WOLF3D.EXE matches
16/wolf3d/WOLFSRC/WOLF3D.MAP: 19127H 1A286H 01160H ID_PM_TEXT         CODE
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0007 1160 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02DF       _PM_CheckMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C71       _PM_GetPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:07BF       _PM_GetPageAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0FBA       _PM_NextFrame
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D60       _PM_Preload
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:1034 idle  _PM_Reset
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02B8       _PM_SetMainMemPurge
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D31       _PM_SetPageLock
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:114B       _PM_Shutdown
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:10A0       _PM_Startup
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02B8       _PM_SetMainMemPurge
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02DF       _PM_CheckMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:07BF       _PM_GetPageAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C71       _PM_GetPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D31       _PM_SetPageLock
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D60       _PM_Preload
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0FBA       _PM_NextFrame
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:1034 idle  _PM_Reset
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:10A0       _PM_Startup
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:114B       _PM_Shutdown
16/wolf3d/WOLFSRC/WOLFHACK.C:	src = PM_GetPage(0);
16/wolf3d/WOLFSRC/WOLFHACK.C:	src = PM_GetPage(1);
