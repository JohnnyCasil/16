16/wf3d8086/contigsc.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/contigsc.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/id_pm.c://	PM_SetMainMemPurge() - Sets the purge level for all allocated main memory
16/wf3d8086/id_pm.c://		blocks. This shouldn't be called directly - the PM_LockMainMem() and
16/wf3d8086/id_pm.c://		PM_UnlockMainMem() macros should be used instead.
16/wf3d8086/id_pm.c:PM_SetMainMemPurge(int level)
16/wf3d8086/id_pm.c://	PM_CheckMainMem() - If something besides the Page Mgr makes requests of
16/wf3d8086/id_pm.c://	This routine now calls PM_LockMainMem() to make sure that any allocation
16/wf3d8086/id_pm.c://		of the other blocks. Because PM_LockMainMem() is called,
16/wf3d8086/id_pm.c://		PM_UnlockMainMem() needs to be called before any other part of the
16/wf3d8086/id_pm.c:PM_CheckMainMem(void)
16/wf3d8086/id_pm.c:	PM_LockMainMem();
16/wf3d8086/id_pm.c://		necessary to make requests of the Memory Mgr, PM_UnlockMainMem()
16/wf3d8086/id_pm.c:		Quit("PM_SetupMainMem: Not enough main memory");
16/wf3d8086/id_pm.c://	PM_GetPageAddress() - Returns the address of a given page
16/wf3d8086/id_pm.c:PM_GetPageAddress(int pagenum)
16/wf3d8086/id_pm.c:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wf3d8086/id_pm.c:	addr = PM_GetPageAddress(orig);
16/wf3d8086/id_pm.c://	PM_GetPage() - Returns the address of the page, loading it if necessary
16/wf3d8086/id_pm.c:PM_GetPage(int pagenum)
16/wf3d8086/id_pm.c:		Quit("PM_GetPage: Invalid page request");
16/wf3d8086/id_pm.c:	if (!(result = PM_GetPageAddress(pagenum)))
16/wf3d8086/id_pm.c:			result = PM_GetPageAddress(pagenum);
16/wf3d8086/id_pm.c://	PM_SetPageLock() - Sets the lock type on a given page
16/wf3d8086/id_pm.c:PM_SetPageLock(int pagenum,PMLockType lock)
16/wf3d8086/id_pm.c:		Quit("PM_SetPageLock: Locking/unlocking non-sound page");
16/wf3d8086/id_pm.c://	PM_Preload() - Loads as many pages as possible into all types of memory.
16/wf3d8086/id_pm.c:PM_Preload(boolean (*update)(word current,word total))
16/wf3d8086/id_pm.c:			Quit ("PM_Preload: Pages>=ChunksInFile");
16/wf3d8086/id_pm.c:		PM_GetPage(page);
16/wf3d8086/id_pm.c:		addr = PM_GetPage(oogypage);
16/wf3d8086/id_pm.c:			Quit("PM_Preload: XMS buffer failed");
16/wf3d8086/id_pm.c:				Quit ("PM_Preload: Pages>=ChunksInFile");
16/wf3d8086/id_pm.c:				Quit("PM_Preload: Exceeded XMS pages");
16/wf3d8086/id_pm.c:				Quit("PM_Preload: Page too long");
16/wf3d8086/id_pm.c://	PM_NextFrame() - Increments the frame counter and adjusts the thrash
16/wf3d8086/id_pm.c:PM_NextFrame(void)
16/wf3d8086/id_pm.c:			sprintf(buf,"PM_NextFrame: Page %d is locked",i);
16/wf3d8086/id_pm.c://	PM_Reset() - Sets up caching structures
16/wf3d8086/id_pm.c:PM_Reset(void)
16/wf3d8086/id_pm.c://	PM_Startup() - Start up the Page Mgr
16/wf3d8086/id_pm.c:PM_Startup(void)
16/wf3d8086/id_pm.c:		Quit("PM_Startup: No main or EMS");
16/wf3d8086/id_pm.c:	PM_Reset();
16/wf3d8086/id_pm.c://	PM_Shutdown() - Shut down the Page Mgr
16/wf3d8086/id_pm.c:PM_Shutdown(void)
16/wf3d8086/id_pm.h:#define	PM_GetSoundPage(v)	PM_GetPage(PMSoundStart + (v))
16/wf3d8086/id_pm.h:#define	PM_GetSpritePage(v)	PM_GetPage(PMSpriteStart + (v))
16/wf3d8086/id_pm.h:#define	PM_LockMainMem()	PM_SetMainMemPurge(0)
16/wf3d8086/id_pm.h:#define	PM_UnlockMainMem()	PM_SetMainMemPurge(3)
16/wf3d8086/id_pm.h:extern	void	PM_Startup(void),
16/wf3d8086/id_pm.h:				PM_Shutdown(void),
16/wf3d8086/id_pm.h:				PM_Reset(void),
16/wf3d8086/id_pm.h:				PM_Preload(boolean (*update)(word current,word total)),
16/wf3d8086/id_pm.h:				PM_NextFrame(void),
16/wf3d8086/id_pm.h:				PM_SetPageLock(int pagenum,PMLockType lock),
16/wf3d8086/id_pm.h:				PM_SetMainPurge(int level),
16/wf3d8086/id_pm.h:				PM_CheckMainMem(void);
16/wf3d8086/id_pm.h:extern	memptr	PM_GetPageAddress(int pagenum),
16/wf3d8086/id_pm.h:				PM_GetPage(int pagenum);		// Use this one to cache page
16/wf3d8086/id_pm.h:void PM_SetMainMemPurge(int level);
16/wf3d8086/id_sd.c:	addr = PM_GetSoundPage(page);
16/wf3d8086/id_sd.c:	PM_SetPageLock(PMSoundStart + page,pml_Locked);
16/wf3d8086/id_sd.c:		PM_SetPageLock(i + PMSoundStart,pml_Unlocked);
16/wf3d8086/id_sd.c:	PM_UnlockMainMem();
16/wf3d8086/id_sd.c:	PM_CheckMainMem();
16/wf3d8086/id_sd.c:	p = (word far *)MK_FP(PM_GetPage(ChunksInFile - 1),0);
16/wf3d8086/id_sd.c:	PM_UnlockMainMem();
Binary file 16/wf3d8086/obj/wolf3d.exe matches
16/wf3d8086/obj/wolf3d.map: 1A268H 1B44AH 011E3H ID_PM_TEXT         CODE
16/wf3d8086/obj/wolf3d.map: 1A26:0008 11E3 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wf3d8086/obj/wolf3d.map: 1A26:02F3       _PM_CheckMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:0CDE       _PM_GetPage
16/wf3d8086/obj/wolf3d.map: 1A26:080D       _PM_GetPageAddress
16/wf3d8086/obj/wolf3d.map: 1A26:1036       _PM_NextFrame
16/wf3d8086/obj/wolf3d.map: 1A26:0DD0       _PM_Preload
16/wf3d8086/obj/wolf3d.map: 1A26:10B0 idle  _PM_Reset
16/wf3d8086/obj/wolf3d.map: 1A26:02CA       _PM_SetMainMemPurge
16/wf3d8086/obj/wolf3d.map: 1A26:0DA0       _PM_SetPageLock
16/wf3d8086/obj/wolf3d.map: 1A26:11CF       _PM_Shutdown
16/wf3d8086/obj/wolf3d.map: 1A26:111E       _PM_Startup
16/wf3d8086/obj/wolf3d.map: 1A26:02CA       _PM_SetMainMemPurge
16/wf3d8086/obj/wolf3d.map: 1A26:02F3       _PM_CheckMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:080D       _PM_GetPageAddress
16/wf3d8086/obj/wolf3d.map: 1A26:0CDE       _PM_GetPage
16/wf3d8086/obj/wolf3d.map: 1A26:0DA0       _PM_SetPageLock
16/wf3d8086/obj/wolf3d.map: 1A26:0DD0       _PM_Preload
16/wf3d8086/obj/wolf3d.map: 1A26:1036       _PM_NextFrame
16/wf3d8086/obj/wolf3d.map: 1A26:10B0 idle  _PM_Reset
16/wf3d8086/obj/wolf3d.map: 1A26:111E       _PM_Startup
16/wf3d8086/obj/wolf3d.map: 1A26:11CF       _PM_Shutdown
16/wf3d8086/oldscale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/oldscale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wl_act2.c:	PM_UnlockMainMem ();
16/wf3d8086/wl_act2.c:	PM_CheckMainMem ();
16/wf3d8086/wl_debug.c:		addr = PM_GetPageAddress(i);
16/wf3d8086/wl_debug.c:				PM_GetPage(j);
16/wf3d8086/wl_debug.c:			PM_GetPage(i);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage+1);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wf3d8086/wl_draw.c:	PM_NextFrame();
16/wf3d8086/wl_game.c:	PM_UnlockMainMem();
16/wf3d8086/wl_game.c:	PM_CheckMainMem ();
16/wf3d8086/wl_game.c:	PM_CheckMainMem ();
16/wf3d8086/wl_game.c:		PM_CheckMainMem ();
16/wf3d8086/wl_game.c:			PM_CheckMainMem ();
16/wf3d8086/wl_inter.c:	PM_Preload (PreloadUpdate);
16/wf3d8086/wl_main.c:	PM_Shutdown ();
16/wf3d8086/wl_main.c:	PM_Startup ();
16/wf3d8086/wl_main.c:	PM_UnlockMainMem ();
16/wf3d8086/wl_menu.c:				PM_CheckMainMem ();
16/wf3d8086/wl_menu.c:				PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_play.c:	 PM_CheckMainMem ();
16/wf3d8086/wl_play.c:	 PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_play.c:		PM_CheckMainMem ();
16/wf3d8086/wl_scale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wl_scale.c:	shape = PM_GetSpritePage (shapenum);
16/wf3d8086/wolf3d.map: 19127H 1A286H 01160H ID_PM_TEXT         CODE
16/wf3d8086/wolf3d.map: 1912:0007 1160 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wf3d8086/wolf3d.map: 1912:02DF       _PM_CheckMainMem
16/wf3d8086/wolf3d.map: 1912:0C71       _PM_GetPage
16/wf3d8086/wolf3d.map: 1912:07BF       _PM_GetPageAddress
16/wf3d8086/wolf3d.map: 1912:0FBA       _PM_NextFrame
16/wf3d8086/wolf3d.map: 1912:0D60       _PM_Preload
16/wf3d8086/wolf3d.map: 1912:1034 idle  _PM_Reset
16/wf3d8086/wolf3d.map: 1912:02B8       _PM_SetMainMemPurge
16/wf3d8086/wolf3d.map: 1912:0D31       _PM_SetPageLock
16/wf3d8086/wolf3d.map: 1912:114B       _PM_Shutdown
16/wf3d8086/wolf3d.map: 1912:10A0       _PM_Startup
16/wf3d8086/wolf3d.map: 1912:02B8       _PM_SetMainMemPurge
16/wf3d8086/wolf3d.map: 1912:02DF       _PM_CheckMainMem
16/wf3d8086/wolf3d.map: 1912:07BF       _PM_GetPageAddress
16/wf3d8086/wolf3d.map: 1912:0C71       _PM_GetPage
16/wf3d8086/wolf3d.map: 1912:0D31       _PM_SetPageLock
16/wf3d8086/wolf3d.map: 1912:0D60       _PM_Preload
16/wf3d8086/wolf3d.map: 1912:0FBA       _PM_NextFrame
16/wf3d8086/wolf3d.map: 1912:1034 idle  _PM_Reset
16/wf3d8086/wolf3d.map: 1912:10A0       _PM_Startup
16/wf3d8086/wolf3d.map: 1912:114B       _PM_Shutdown
16/wf3d8086/wolfhack.c:	src = PM_GetPage(0);
16/wf3d8086/wolfhack.c:	src = PM_GetPage(1);
16/wolf3d/WOLFSRC/CONTIGSC.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/CONTIGSC.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_SetMainMemPurge() - Sets the purge level for all allocated main memory
16/wolf3d/WOLFSRC/ID_PM.C://		blocks. This shouldn't be called directly - the PM_LockMainMem() and
16/wolf3d/WOLFSRC/ID_PM.C://		PM_UnlockMainMem() macros should be used instead.
16/wolf3d/WOLFSRC/ID_PM.C:PM_SetMainMemPurge(int level)
16/wolf3d/WOLFSRC/ID_PM.C://	PM_CheckMainMem() - If something besides the Page Mgr makes requests of
16/wolf3d/WOLFSRC/ID_PM.C://	This routine now calls PM_LockMainMem() to make sure that any allocation
16/wolf3d/WOLFSRC/ID_PM.C://		of the other blocks. Because PM_LockMainMem() is called,
16/wolf3d/WOLFSRC/ID_PM.C://		PM_UnlockMainMem() needs to be called before any other part of the
16/wolf3d/WOLFSRC/ID_PM.C:PM_CheckMainMem(void)
16/wolf3d/WOLFSRC/ID_PM.C:	PM_LockMainMem();
16/wolf3d/WOLFSRC/ID_PM.C://		necessary to make requests of the Memory Mgr, PM_UnlockMainMem()
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_SetupMainMem: Not enough main memory");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_GetPageAddress() - Returns the address of a given page
16/wolf3d/WOLFSRC/ID_PM.C:PM_GetPageAddress(int pagenum)
16/wolf3d/WOLFSRC/ID_PM.C:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wolf3d/WOLFSRC/ID_PM.C:	addr = PM_GetPageAddress(orig);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_GetPage() - Returns the address of the page, loading it if necessary
16/wolf3d/WOLFSRC/ID_PM.C:PM_GetPage(int pagenum)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_GetPage: Invalid page request");
16/wolf3d/WOLFSRC/ID_PM.C:	if (!(result = PM_GetPageAddress(pagenum)))
16/wolf3d/WOLFSRC/ID_PM.C:			result = PM_GetPageAddress(pagenum);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_SetPageLock() - Sets the lock type on a given page
16/wolf3d/WOLFSRC/ID_PM.C:PM_SetPageLock(int pagenum,PMLockType lock)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_SetPageLock: Locking/unlocking non-sound page");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Preload() - Loads as many pages as possible into all types of memory.
16/wolf3d/WOLFSRC/ID_PM.C:PM_Preload(boolean (*update)(word current,word total))
16/wolf3d/WOLFSRC/ID_PM.C:			Quit ("PM_Preload: Pages>=ChunksInFile");
16/wolf3d/WOLFSRC/ID_PM.C:		PM_GetPage(page);
16/wolf3d/WOLFSRC/ID_PM.C:		addr = PM_GetPage(oogypage);
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PM_Preload: XMS buffer failed");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit ("PM_Preload: Pages>=ChunksInFile");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit("PM_Preload: Exceeded XMS pages");
16/wolf3d/WOLFSRC/ID_PM.C:				Quit("PM_Preload: Page too long");
16/wolf3d/WOLFSRC/ID_PM.C://	PM_NextFrame() - Increments the frame counter and adjusts the thrash
16/wolf3d/WOLFSRC/ID_PM.C:PM_NextFrame(void)
16/wolf3d/WOLFSRC/ID_PM.C:			sprintf(buf,"PM_NextFrame: Page %d is locked",i);
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Reset() - Sets up caching structures
16/wolf3d/WOLFSRC/ID_PM.C:PM_Reset(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Startup() - Start up the Page Mgr
16/wolf3d/WOLFSRC/ID_PM.C:PM_Startup(void)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PM_Startup: No main or EMS");
16/wolf3d/WOLFSRC/ID_PM.C:	PM_Reset();
16/wolf3d/WOLFSRC/ID_PM.C://	PM_Shutdown() - Shut down the Page Mgr
16/wolf3d/WOLFSRC/ID_PM.C:PM_Shutdown(void)
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_GetSoundPage(v)	PM_GetPage(PMSoundStart + (v))
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_GetSpritePage(v)	PM_GetPage(PMSpriteStart + (v))
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_LockMainMem()	PM_SetMainMemPurge(0)
16/wolf3d/WOLFSRC/ID_PM.H:#define	PM_UnlockMainMem()	PM_SetMainMemPurge(3)
16/wolf3d/WOLFSRC/ID_PM.H:extern	void	PM_Startup(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Shutdown(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Reset(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_Preload(boolean (*update)(word current,word total)),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_NextFrame(void),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_SetPageLock(int pagenum,PMLockType lock),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_SetMainPurge(int level),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_CheckMainMem(void);
16/wolf3d/WOLFSRC/ID_PM.H:extern	memptr	PM_GetPageAddress(int pagenum),
16/wolf3d/WOLFSRC/ID_PM.H:				PM_GetPage(int pagenum);		// Use this one to cache page
16/wolf3d/WOLFSRC/ID_PM.H:void PM_SetMainMemPurge(int level);
16/wolf3d/WOLFSRC/ID_SD.C:	addr = PM_GetSoundPage(page);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_SetPageLock(PMSoundStart + page,pml_Locked);
16/wolf3d/WOLFSRC/ID_SD.C:		PM_SetPageLock(i + PMSoundStart,pml_Unlocked);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/ID_SD.C:	PM_CheckMainMem();
16/wolf3d/WOLFSRC/ID_SD.C:	p = (word far *)MK_FP(PM_GetPage(ChunksInFile - 1),0);
16/wolf3d/WOLFSRC/ID_SD.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/OLDSCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/OLDSCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/WL_ACT2.C:	PM_UnlockMainMem ();
16/wolf3d/WOLFSRC/WL_ACT2.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_DEBUG.C:		addr = PM_GetPageAddress(i);
16/wolf3d/WOLFSRC/WL_DEBUG.C:				PM_GetPage(j);
16/wolf3d/WOLFSRC/WL_DEBUG.C:			PM_GetPage(i);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(doorpage+1);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:		*( ((unsigned *)&postsource)+1) = (unsigned)PM_GetPage(wallpic);
16/wolf3d/WOLFSRC/WL_DRAW.C:	PM_NextFrame();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_UnlockMainMem();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:	PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_GAME.C:			PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_INTER.C:	PM_Preload (PreloadUpdate);
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_Shutdown ();
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_Startup ();
16/wolf3d/WOLFSRC/WL_MAIN.C:	PM_UnlockMainMem ();
16/wolf3d/WOLFSRC/WL_MENU.C:				PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_MENU.C:				PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:	 PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:	 PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_PLAY.C:		PM_CheckMainMem ();
16/wolf3d/WOLFSRC/WL_SCALE.C:	shape = PM_GetSpritePage (shapenum);
16/wolf3d/WOLFSRC/WL_SCALE.C:	shape = PM_GetSpritePage (shapenum);
Binary file 16/wolf3d/WOLFSRC/WOLF3D.EXE matches
16/wolf3d/WOLFSRC/WOLF3D.MAP: 19127H 1A286H 01160H ID_PM_TEXT         CODE
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0007 1160 C=CODE   S=ID_PM_TEXT     G=(none)  M=ID_PM.C    ACBP=28
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02DF       _PM_CheckMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C71       _PM_GetPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:07BF       _PM_GetPageAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0FBA       _PM_NextFrame
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D60       _PM_Preload
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:1034 idle  _PM_Reset
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02B8       _PM_SetMainMemPurge
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D31       _PM_SetPageLock
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:114B       _PM_Shutdown
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:10A0       _PM_Startup
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02B8       _PM_SetMainMemPurge
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:02DF       _PM_CheckMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:07BF       _PM_GetPageAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C71       _PM_GetPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D31       _PM_SetPageLock
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0D60       _PM_Preload
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0FBA       _PM_NextFrame
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:1034 idle  _PM_Reset
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:10A0       _PM_Startup
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:114B       _PM_Shutdown
16/wolf3d/WOLFSRC/WOLFHACK.C:	src = PM_GetPage(0);
16/wolf3d/WOLFSRC/WOLFHACK.C:	src = PM_GetPage(1);
16/wf3d8086/id_pm.c://	PML_MapEMS() - Maps a logical page to a physical page
16/wf3d8086/id_pm.c:PML_MapEMS(word logical,word physical)
16/wf3d8086/id_pm.c:		Quit("PML_MapEMS: Page mapping failed");
16/wf3d8086/id_pm.c://	PML_StartupEMS() - Sets up EMS for Page Mgr's use
16/wf3d8086/id_pm.c:PML_StartupEMS(void)
16/wf3d8086/id_pm.c://	PML_ShutdownEMS() - If EMS was used, deallocate it
16/wf3d8086/id_pm.c:PML_ShutdownEMS(void)
16/wf3d8086/id_pm.c:			Quit ("PML_ShutdownEMS: Error freeing EMS");
16/wf3d8086/id_pm.c://	PML_StartupXMS() - Starts up XMS for the Page Mgr's use
16/wf3d8086/id_pm.c:PML_StartupXMS(void)
16/wf3d8086/id_pm.c://	PML_XMSCopy() - Copies a main/EMS page to or from XMS
16/wf3d8086/id_pm.c:PML_XMSCopy(boolean toxms,byte far *addr,word xmspage,word length)
16/wf3d8086/id_pm.c:		Quit("PML_XMSCopy: zero address");
16/wf3d8086/id_pm.c:		Quit("PML_XMSCopy: Error on copy");
16/wf3d8086/id_pm.c:#define	PML_CopyToXMS(s,t,l)	PML_XMSCopy(true,(s),(t),(l))
16/wf3d8086/id_pm.c:#define	PML_CopyFromXMS(t,s,l)	PML_XMSCopy(false,(t),(s),(l))
16/wf3d8086/id_pm.c://	PML_CopyToXMS() - Copies the specified number of bytes from the real mode
16/wf3d8086/id_pm.c:PML_CopyToXMS(byte far *source,int targetpage,word length)
16/wf3d8086/id_pm.c:	PML_XMSCopy(true,source,targetpage,length);
16/wf3d8086/id_pm.c://	PML_CopyFromXMS() - Copies the specified number of bytes from an XMS
16/wf3d8086/id_pm.c:PML_CopyFromXMS(byte far *target,int sourcepage,word length)
16/wf3d8086/id_pm.c:	PML_XMSCopy(false,target,sourcepage,length);
16/wf3d8086/id_pm.c://	PML_ShutdownXMS()
16/wf3d8086/id_pm.c:PML_ShutdownXMS(void)
16/wf3d8086/id_pm.c:			Quit("PML_ShutdownXMS: Error freeing XMS");
16/wf3d8086/id_pm.c://	PML_StartupMainMem() - Allocates as much main memory as is possible for
16/wf3d8086/id_pm.c:PML_StartupMainMem(void)
16/wf3d8086/id_pm.c://	PML_ShutdownMainMem() - Frees all of the main memory blocks used by the
16/wf3d8086/id_pm.c:PML_ShutdownMainMem(void)
16/wf3d8086/id_pm.c://	PML_ReadFromFile() - Reads some data in from the page file
16/wf3d8086/id_pm.c:PML_ReadFromFile(byte far *buf,long offset,word length)
16/wf3d8086/id_pm.c:		Quit("PML_ReadFromFile: Null pointer");
16/wf3d8086/id_pm.c:		Quit("PML_ReadFromFile: Zero offset");
16/wf3d8086/id_pm.c:		Quit("PML_ReadFromFile: Seek failed");
16/wf3d8086/id_pm.c:		Quit("PML_ReadFromFile: Read failed");
16/wf3d8086/id_pm.c://	PML_OpenPageFile() - Opens the page file and sets up the page info
16/wf3d8086/id_pm.c:PML_OpenPageFile(void)
16/wf3d8086/id_pm.c:		Quit("PML_OpenPageFile: Unable to open page file");
16/wf3d8086/id_pm.c:		Quit("PML_OpenPageFile: Offset read failed");
16/wf3d8086/id_pm.c:		Quit("PML_OpenPageFile: Length read failed");
16/wf3d8086/id_pm.c://  PML_ClosePageFile() - Closes the page file
16/wf3d8086/id_pm.c:PML_ClosePageFile(void)
16/wf3d8086/id_pm.c://	PML_GetEMSAddress()
16/wf3d8086/id_pm.c:PML_GetEMSAddress(int page,PMLockType lock)
16/wf3d8086/id_pm.c:		PML_MapEMS(page / PMEMSSubPage,emspage);
16/wf3d8086/id_pm.c:		Quit("PML_GetEMSAddress: EMS find failed");
16/wf3d8086/id_pm.c:PML_GetEMSAddress(int page,PMLockType lock)
16/wf3d8086/id_pm.c:	PML_MapEMS(page / PMEMSSubPage,emspage);
16/wf3d8086/id_pm.c:		return(PML_GetEMSAddress(page->emsPage,page->locked));
16/wf3d8086/id_pm.c://	PML_GiveLRUPage() - Returns the page # of the least recently used
16/wf3d8086/id_pm.c:PML_GiveLRUPage(boolean mainonly)
16/wf3d8086/id_pm.c:		Quit("PML_GiveLRUPage: LRU Search failed");
16/wf3d8086/id_pm.c://	PML_GiveLRUXMSPage() - Returns the page # of the least recently used
16/wf3d8086/id_pm.c:PML_GiveLRUXMSPage(void)
16/wf3d8086/id_pm.c://	PML_PutPageInXMS() - If page isn't in XMS, find LRU XMS page and replace
16/wf3d8086/id_pm.c:PML_PutPageInXMS(int pagenum)
16/wf3d8086/id_pm.c:		usexms = PML_GiveLRUXMSPage();
16/wf3d8086/id_pm.c:			Quit("PML_PutPageInXMS: No XMS LRU");
16/wf3d8086/id_pm.c:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wf3d8086/id_pm.c://	PML_TransferPageSpace() - A page is being replaced, so give the new page
16/wf3d8086/id_pm.c:PML_TransferPageSpace(int orig,int new)
16/wf3d8086/id_pm.c:		Quit("PML_TransferPageSpace: Identity replacement");
16/wf3d8086/id_pm.c:		Quit("PML_TransferPageSpace: Killing locked page");
16/wf3d8086/id_pm.c:		Quit("PML_TransferPageSpace: Reusing non-existent page");
16/wf3d8086/id_pm.c:	PML_PutPageInXMS(orig);
16/wf3d8086/id_pm.c:		Quit("PML_TransferPageSpace: Zero replacement");
16/wf3d8086/id_pm.c://	PML_GetAPageBuffer() - A page buffer is needed. Either get it from the
16/wf3d8086/id_pm.c://		main/EMS free pool, or use PML_GiveLRUPage() to find which page to
16/wf3d8086/id_pm.c://		will be looked at by PML_GiveLRUPage().
16/wf3d8086/id_pm.c:PML_GetAPageBuffer(int pagenum,boolean mainonly)
16/wf3d8086/id_pm.c:		addr = PML_GetEMSAddress(page->emsPage,page->locked);
16/wf3d8086/id_pm.c:			Quit("PML_GetPageBuffer: MainPagesAvail lied");
16/wf3d8086/id_pm.c:			Quit("PML_GetPageBuffer: Purged main block");
16/wf3d8086/id_pm.c:		addr = PML_TransferPageSpace(PML_GiveLRUPage(mainonly),pagenum);
16/wf3d8086/id_pm.c:		Quit("PML_GetPageBuffer: Search failed");
16/wf3d8086/id_pm.c://	PML_GetPageFromXMS() - If page is in XMS, find LRU main/EMS page and
16/wf3d8086/id_pm.c:PML_GetPageFromXMS(int pagenum,boolean mainonly)
16/wf3d8086/id_pm.c:		checkaddr = PML_GetAPageBuffer(pagenum,mainonly);
16/wf3d8086/id_pm.c:			Quit("PML_GetPageFromXMS: Non segment pointer");
16/wf3d8086/id_pm.c:		PML_CopyFromXMS(addr,page->xmsPage,page->length);
16/wf3d8086/id_pm.c://	PML_LoadPage() - A page is not in main/EMS memory, and it's not in XMS.
16/wf3d8086/id_pm.c:PML_LoadPage(int pagenum,boolean mainonly)
16/wf3d8086/id_pm.c:	addr = PML_GetAPageBuffer(pagenum,mainonly);
16/wf3d8086/id_pm.c:	PML_ReadFromFile(addr,page->offset,page->length);
16/wf3d8086/id_pm.c:		if (!(result = PML_GetPageFromXMS(pagenum,mainonly)))
16/wf3d8086/id_pm.c:			PML_LoadPage(pagenum,mainonly);
16/wf3d8086/id_pm.c:			PML_ReadFromFile((byte far *)addr,p->offset,p->length);
16/wf3d8086/id_pm.c:			PML_CopyToXMS((byte far *)addr,p->xmsPage,p->length);
16/wf3d8086/id_pm.c:		PML_ReadFromFile((byte far *)addr,p->offset,p->length);
16/wf3d8086/id_pm.c:	PML_OpenPageFile();
16/wf3d8086/id_pm.c:		PML_StartupEMS();
16/wf3d8086/id_pm.c:		PML_StartupXMS();
16/wf3d8086/id_pm.c:		PML_StartupMainMem();
16/wf3d8086/id_pm.c:	PML_ShutdownXMS();
16/wf3d8086/id_pm.c:	PML_ShutdownEMS();
16/wf3d8086/id_pm.c:	PML_ClosePageFile();
16/wf3d8086/id_pm.c:	PML_ShutdownMainMem();
Binary file 16/wf3d8086/obj/wolf3d.exe matches
16/wf3d8086/obj/wolf3d.map: 1A26:06F7 idle  _PML_ClosePageFile
16/wf3d8086/obj/wolf3d.map: 1A26:0AFB idle  _PML_GetAPageBuffer
16/wf3d8086/obj/wolf3d.map: 1A26:0731 idle  _PML_GetEMSAddress
16/wf3d8086/obj/wolf3d.map: 1A26:0C08 idle  _PML_GetPageFromXMS
16/wf3d8086/obj/wolf3d.map: 1A26:0866 idle  _PML_GiveLRUPage
16/wf3d8086/obj/wolf3d.map: 1A26:0907 idle  _PML_GiveLRUXMSPage
16/wf3d8086/obj/wolf3d.map: 1A26:0C8C idle  _PML_LoadPage
16/wf3d8086/obj/wolf3d.map: 1A26:0008 idle  _PML_MapEMS
16/wf3d8086/obj/wolf3d.map: 1A26:0510 idle  _PML_OpenPageFile
16/wf3d8086/obj/wolf3d.map: 1A26:0979 idle  _PML_PutPageInXMS
16/wf3d8086/obj/wolf3d.map: 1A26:0490 idle  _PML_ReadFromFile
16/wf3d8086/obj/wolf3d.map: 1A26:0160 idle  _PML_ShutdownEMS
16/wf3d8086/obj/wolf3d.map: 1A26:0469 idle  _PML_ShutdownMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:02A4 idle  _PML_ShutdownXMS
16/wf3d8086/obj/wolf3d.map: 1A26:002B idle  _PML_StartupEMS
16/wf3d8086/obj/wolf3d.map: 1A26:03EC idle  _PML_StartupMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:0184 idle  _PML_StartupXMS
16/wf3d8086/obj/wolf3d.map: 1A26:0A28 idle  _PML_TransferPageSpace
16/wf3d8086/obj/wolf3d.map: 1A26:01F7 idle  _PML_XMSCopy
16/wf3d8086/obj/wolf3d.map: 1A26:0008 idle  _PML_MapEMS
16/wf3d8086/obj/wolf3d.map: 1A26:002B idle  _PML_StartupEMS
16/wf3d8086/obj/wolf3d.map: 1A26:0160 idle  _PML_ShutdownEMS
16/wf3d8086/obj/wolf3d.map: 1A26:0184 idle  _PML_StartupXMS
16/wf3d8086/obj/wolf3d.map: 1A26:01F7 idle  _PML_XMSCopy
16/wf3d8086/obj/wolf3d.map: 1A26:02A4 idle  _PML_ShutdownXMS
16/wf3d8086/obj/wolf3d.map: 1A26:03EC idle  _PML_StartupMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:0469 idle  _PML_ShutdownMainMem
16/wf3d8086/obj/wolf3d.map: 1A26:0490 idle  _PML_ReadFromFile
16/wf3d8086/obj/wolf3d.map: 1A26:0510 idle  _PML_OpenPageFile
16/wf3d8086/obj/wolf3d.map: 1A26:06F7 idle  _PML_ClosePageFile
16/wf3d8086/obj/wolf3d.map: 1A26:0731 idle  _PML_GetEMSAddress
16/wf3d8086/obj/wolf3d.map: 1A26:0866 idle  _PML_GiveLRUPage
16/wf3d8086/obj/wolf3d.map: 1A26:0907 idle  _PML_GiveLRUXMSPage
16/wf3d8086/obj/wolf3d.map: 1A26:0979 idle  _PML_PutPageInXMS
16/wf3d8086/obj/wolf3d.map: 1A26:0A28 idle  _PML_TransferPageSpace
16/wf3d8086/obj/wolf3d.map: 1A26:0AFB idle  _PML_GetAPageBuffer
16/wf3d8086/obj/wolf3d.map: 1A26:0C08 idle  _PML_GetPageFromXMS
16/wf3d8086/obj/wolf3d.map: 1A26:0C8C idle  _PML_LoadPage
16/wf3d8086/wolf3d.map: 1912:06B1 idle  _PML_ClosePageFile
16/wf3d8086/wolf3d.map: 1912:0A96 idle  _PML_GetAPageBuffer
16/wf3d8086/wolf3d.map: 1912:06E8 idle  _PML_GetEMSAddress
16/wf3d8086/wolf3d.map: 1912:0BA0 idle  _PML_GetPageFromXMS
16/wf3d8086/wolf3d.map: 1912:0812 idle  _PML_GiveLRUPage
16/wf3d8086/wolf3d.map: 1912:08B0 idle  _PML_GiveLRUXMSPage
16/wf3d8086/wolf3d.map: 1912:0C21 idle  _PML_LoadPage
16/wf3d8086/wolf3d.map: 1912:0007 idle  _PML_MapEMS
16/wf3d8086/wolf3d.map: 1912:04E8 idle  _PML_OpenPageFile
16/wf3d8086/wolf3d.map: 1912:0920 idle  _PML_PutPageInXMS
16/wf3d8086/wolf3d.map: 1912:046E idle  _PML_ReadFromFile
16/wf3d8086/wolf3d.map: 1912:0155 idle  _PML_ShutdownEMS
16/wf3d8086/wolf3d.map: 1912:0447 idle  _PML_ShutdownMainMem
16/wf3d8086/wolf3d.map: 1912:0293 idle  _PML_ShutdownXMS
16/wf3d8086/wolf3d.map: 1912:0029 idle  _PML_StartupEMS
16/wf3d8086/wolf3d.map: 1912:03D0 idle  _PML_StartupMainMem
16/wf3d8086/wolf3d.map: 1912:0178 idle  _PML_StartupXMS
16/wf3d8086/wolf3d.map: 1912:09C9 idle  _PML_TransferPageSpace
16/wf3d8086/wolf3d.map: 1912:01EA idle  _PML_XMSCopy
16/wf3d8086/wolf3d.map: 1912:0007 idle  _PML_MapEMS
16/wf3d8086/wolf3d.map: 1912:0029 idle  _PML_StartupEMS
16/wf3d8086/wolf3d.map: 1912:0155 idle  _PML_ShutdownEMS
16/wf3d8086/wolf3d.map: 1912:0178 idle  _PML_StartupXMS
16/wf3d8086/wolf3d.map: 1912:01EA idle  _PML_XMSCopy
16/wf3d8086/wolf3d.map: 1912:0293 idle  _PML_ShutdownXMS
16/wf3d8086/wolf3d.map: 1912:03D0 idle  _PML_StartupMainMem
16/wf3d8086/wolf3d.map: 1912:0447 idle  _PML_ShutdownMainMem
16/wf3d8086/wolf3d.map: 1912:046E idle  _PML_ReadFromFile
16/wf3d8086/wolf3d.map: 1912:04E8 idle  _PML_OpenPageFile
16/wf3d8086/wolf3d.map: 1912:06B1 idle  _PML_ClosePageFile
16/wf3d8086/wolf3d.map: 1912:06E8 idle  _PML_GetEMSAddress
16/wf3d8086/wolf3d.map: 1912:0812 idle  _PML_GiveLRUPage
16/wf3d8086/wolf3d.map: 1912:08B0 idle  _PML_GiveLRUXMSPage
16/wf3d8086/wolf3d.map: 1912:0920 idle  _PML_PutPageInXMS
16/wf3d8086/wolf3d.map: 1912:09C9 idle  _PML_TransferPageSpace
16/wf3d8086/wolf3d.map: 1912:0A96 idle  _PML_GetAPageBuffer
16/wf3d8086/wolf3d.map: 1912:0BA0 idle  _PML_GetPageFromXMS
16/wf3d8086/wolf3d.map: 1912:0C21 idle  _PML_LoadPage
16/wolf3d/WOLFSRC/ID_PM.C://	PML_MapEMS() - Maps a logical page to a physical page
16/wolf3d/WOLFSRC/ID_PM.C:PML_MapEMS(word logical,word physical)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_MapEMS: Page mapping failed");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_StartupEMS() - Sets up EMS for Page Mgr's use
16/wolf3d/WOLFSRC/ID_PM.C:PML_StartupEMS(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_ShutdownEMS() - If EMS was used, deallocate it
16/wolf3d/WOLFSRC/ID_PM.C:PML_ShutdownEMS(void)
16/wolf3d/WOLFSRC/ID_PM.C:			Quit ("PML_ShutdownEMS: Error freeing EMS");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_StartupXMS() - Starts up XMS for the Page Mgr's use
16/wolf3d/WOLFSRC/ID_PM.C:PML_StartupXMS(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_XMSCopy() - Copies a main/EMS page to or from XMS
16/wolf3d/WOLFSRC/ID_PM.C:PML_XMSCopy(boolean toxms,byte far *addr,word xmspage,word length)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_XMSCopy: zero address");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_XMSCopy: Error on copy");
16/wolf3d/WOLFSRC/ID_PM.C:#define	PML_CopyToXMS(s,t,l)	PML_XMSCopy(true,(s),(t),(l))
16/wolf3d/WOLFSRC/ID_PM.C:#define	PML_CopyFromXMS(t,s,l)	PML_XMSCopy(false,(t),(s),(l))
16/wolf3d/WOLFSRC/ID_PM.C://	PML_CopyToXMS() - Copies the specified number of bytes from the real mode
16/wolf3d/WOLFSRC/ID_PM.C:PML_CopyToXMS(byte far *source,int targetpage,word length)
16/wolf3d/WOLFSRC/ID_PM.C:	PML_XMSCopy(true,source,targetpage,length);
16/wolf3d/WOLFSRC/ID_PM.C://	PML_CopyFromXMS() - Copies the specified number of bytes from an XMS
16/wolf3d/WOLFSRC/ID_PM.C:PML_CopyFromXMS(byte far *target,int sourcepage,word length)
16/wolf3d/WOLFSRC/ID_PM.C:	PML_XMSCopy(false,target,sourcepage,length);
16/wolf3d/WOLFSRC/ID_PM.C://	PML_ShutdownXMS()
16/wolf3d/WOLFSRC/ID_PM.C:PML_ShutdownXMS(void)
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PML_ShutdownXMS: Error freeing XMS");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_StartupMainMem() - Allocates as much main memory as is possible for
16/wolf3d/WOLFSRC/ID_PM.C:PML_StartupMainMem(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_ShutdownMainMem() - Frees all of the main memory blocks used by the
16/wolf3d/WOLFSRC/ID_PM.C:PML_ShutdownMainMem(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_ReadFromFile() - Reads some data in from the page file
16/wolf3d/WOLFSRC/ID_PM.C:PML_ReadFromFile(byte far *buf,long offset,word length)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_ReadFromFile: Null pointer");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_ReadFromFile: Zero offset");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_ReadFromFile: Seek failed");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_ReadFromFile: Read failed");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_OpenPageFile() - Opens the page file and sets up the page info
16/wolf3d/WOLFSRC/ID_PM.C:PML_OpenPageFile(void)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_OpenPageFile: Unable to open page file");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_OpenPageFile: Offset read failed");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_OpenPageFile: Length read failed");
16/wolf3d/WOLFSRC/ID_PM.C://  PML_ClosePageFile() - Closes the page file
16/wolf3d/WOLFSRC/ID_PM.C:PML_ClosePageFile(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_GetEMSAddress()
16/wolf3d/WOLFSRC/ID_PM.C:PML_GetEMSAddress(int page,PMLockType lock)
16/wolf3d/WOLFSRC/ID_PM.C:		PML_MapEMS(page / PMEMSSubPage,emspage);
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_GetEMSAddress: EMS find failed");
16/wolf3d/WOLFSRC/ID_PM.C:PML_GetEMSAddress(int page,PMLockType lock)
16/wolf3d/WOLFSRC/ID_PM.C:	PML_MapEMS(page / PMEMSSubPage,emspage);
16/wolf3d/WOLFSRC/ID_PM.C:		return(PML_GetEMSAddress(page->emsPage,page->locked));
16/wolf3d/WOLFSRC/ID_PM.C://	PML_GiveLRUPage() - Returns the page # of the least recently used
16/wolf3d/WOLFSRC/ID_PM.C:PML_GiveLRUPage(boolean mainonly)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_GiveLRUPage: LRU Search failed");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_GiveLRUXMSPage() - Returns the page # of the least recently used
16/wolf3d/WOLFSRC/ID_PM.C:PML_GiveLRUXMSPage(void)
16/wolf3d/WOLFSRC/ID_PM.C://	PML_PutPageInXMS() - If page isn't in XMS, find LRU XMS page and replace
16/wolf3d/WOLFSRC/ID_PM.C:PML_PutPageInXMS(int pagenum)
16/wolf3d/WOLFSRC/ID_PM.C:		usexms = PML_GiveLRUXMSPage();
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PML_PutPageInXMS: No XMS LRU");
16/wolf3d/WOLFSRC/ID_PM.C:	PML_CopyToXMS(PM_GetPageAddress(pagenum),page->xmsPage,page->length);
16/wolf3d/WOLFSRC/ID_PM.C://	PML_TransferPageSpace() - A page is being replaced, so give the new page
16/wolf3d/WOLFSRC/ID_PM.C:PML_TransferPageSpace(int orig,int new)
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_TransferPageSpace: Identity replacement");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_TransferPageSpace: Killing locked page");
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_TransferPageSpace: Reusing non-existent page");
16/wolf3d/WOLFSRC/ID_PM.C:	PML_PutPageInXMS(orig);
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_TransferPageSpace: Zero replacement");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_GetAPageBuffer() - A page buffer is needed. Either get it from the
16/wolf3d/WOLFSRC/ID_PM.C://		main/EMS free pool, or use PML_GiveLRUPage() to find which page to
16/wolf3d/WOLFSRC/ID_PM.C://		will be looked at by PML_GiveLRUPage().
16/wolf3d/WOLFSRC/ID_PM.C:PML_GetAPageBuffer(int pagenum,boolean mainonly)
16/wolf3d/WOLFSRC/ID_PM.C:		addr = PML_GetEMSAddress(page->emsPage,page->locked);
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PML_GetPageBuffer: MainPagesAvail lied");
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PML_GetPageBuffer: Purged main block");
16/wolf3d/WOLFSRC/ID_PM.C:		addr = PML_TransferPageSpace(PML_GiveLRUPage(mainonly),pagenum);
16/wolf3d/WOLFSRC/ID_PM.C:		Quit("PML_GetPageBuffer: Search failed");
16/wolf3d/WOLFSRC/ID_PM.C://	PML_GetPageFromXMS() - If page is in XMS, find LRU main/EMS page and
16/wolf3d/WOLFSRC/ID_PM.C:PML_GetPageFromXMS(int pagenum,boolean mainonly)
16/wolf3d/WOLFSRC/ID_PM.C:		checkaddr = PML_GetAPageBuffer(pagenum,mainonly);
16/wolf3d/WOLFSRC/ID_PM.C:			Quit("PML_GetPageFromXMS: Non segment pointer");
16/wolf3d/WOLFSRC/ID_PM.C:		PML_CopyFromXMS(addr,page->xmsPage,page->length);
16/wolf3d/WOLFSRC/ID_PM.C://	PML_LoadPage() - A page is not in main/EMS memory, and it's not in XMS.
16/wolf3d/WOLFSRC/ID_PM.C:PML_LoadPage(int pagenum,boolean mainonly)
16/wolf3d/WOLFSRC/ID_PM.C:	addr = PML_GetAPageBuffer(pagenum,mainonly);
16/wolf3d/WOLFSRC/ID_PM.C:	PML_ReadFromFile(addr,page->offset,page->length);
16/wolf3d/WOLFSRC/ID_PM.C:		if (!(result = PML_GetPageFromXMS(pagenum,mainonly)))
16/wolf3d/WOLFSRC/ID_PM.C:			PML_LoadPage(pagenum,mainonly);
16/wolf3d/WOLFSRC/ID_PM.C:			PML_ReadFromFile((byte far *)addr,p->offset,p->length);
16/wolf3d/WOLFSRC/ID_PM.C:			PML_CopyToXMS((byte far *)addr,p->xmsPage,p->length);
16/wolf3d/WOLFSRC/ID_PM.C:		PML_ReadFromFile((byte far *)addr,p->offset,p->length);
16/wolf3d/WOLFSRC/ID_PM.C:	PML_OpenPageFile();
16/wolf3d/WOLFSRC/ID_PM.C:		PML_StartupEMS();
16/wolf3d/WOLFSRC/ID_PM.C:		PML_StartupXMS();
16/wolf3d/WOLFSRC/ID_PM.C:		PML_StartupMainMem();
16/wolf3d/WOLFSRC/ID_PM.C:	PML_ShutdownXMS();
16/wolf3d/WOLFSRC/ID_PM.C:	PML_ShutdownEMS();
16/wolf3d/WOLFSRC/ID_PM.C:	PML_ClosePageFile();
16/wolf3d/WOLFSRC/ID_PM.C:	PML_ShutdownMainMem();
Binary file 16/wolf3d/WOLFSRC/WOLF3D.EXE matches
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:06B1 idle  _PML_ClosePageFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0A96 idle  _PML_GetAPageBuffer
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:06E8 idle  _PML_GetEMSAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0BA0 idle  _PML_GetPageFromXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0812 idle  _PML_GiveLRUPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:08B0 idle  _PML_GiveLRUXMSPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C21 idle  _PML_LoadPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0007 idle  _PML_MapEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:04E8 idle  _PML_OpenPageFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0920 idle  _PML_PutPageInXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:046E idle  _PML_ReadFromFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0155 idle  _PML_ShutdownEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0447 idle  _PML_ShutdownMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0293 idle  _PML_ShutdownXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0029 idle  _PML_StartupEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:03D0 idle  _PML_StartupMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0178 idle  _PML_StartupXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:09C9 idle  _PML_TransferPageSpace
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:01EA idle  _PML_XMSCopy
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0007 idle  _PML_MapEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0029 idle  _PML_StartupEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0155 idle  _PML_ShutdownEMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0178 idle  _PML_StartupXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:01EA idle  _PML_XMSCopy
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0293 idle  _PML_ShutdownXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:03D0 idle  _PML_StartupMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0447 idle  _PML_ShutdownMainMem
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:046E idle  _PML_ReadFromFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:04E8 idle  _PML_OpenPageFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:06B1 idle  _PML_ClosePageFile
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:06E8 idle  _PML_GetEMSAddress
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0812 idle  _PML_GiveLRUPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:08B0 idle  _PML_GiveLRUXMSPage
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0920 idle  _PML_PutPageInXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:09C9 idle  _PML_TransferPageSpace
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0A96 idle  _PML_GetAPageBuffer
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0BA0 idle  _PML_GetPageFromXMS
16/wolf3d/WOLFSRC/WOLF3D.MAP: 1912:0C21 idle  _PML_LoadPage
