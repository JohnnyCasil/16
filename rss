src/lib/16_enti.c:// 	modexClearRegion(&video->page[0], enti->x, enti->y, 16, 16, 2);
src/lib/16_enti.c:// 	modexClearRegion(&video->page[2], 0, 0, video->page[2].sw, video->page[2].sh, 45);
src/lib/16_enti.c:// 	modexClearRegion(&video->page[3], 0, 0, video->page[3].sw, video->page[3].sh, 47);
src/lib/16_enti.c:	if(!video->bgps)
src/lib/16_enti.c:		video->ofs.pattern_ofs=(uint16_t)video->page[0].data;
src/lib/16_enti.c:		video->ofs.offscreen_ofs=(uint16_t)video->page[3].data;
src/lib/16_enti.c:		o2 = video->ofs.offscreen_ofs;										//dest
src/lib/16_enti.c:		o = video->ofs.pattern_ofs + (enti->y * video->page[0].stridew) + (enti->x >> 2);	// source
src/lib/16_enti.c:		for (i=0;i < h;i++,o += video->page[0].stridew,o2 += (w >> 2)) vga_wm1_mem_block_copy(o2,o,w >> 2);
src/lib/16_enti.c:		modexCopyPageRegion(&video->page[2], &video->page[0], enti->x, enti->y, 0, 0, 24, 32);
src/lib/16_sprit.c:	VGA_RAM_PTR omemptr = (VGA_RAM_PTR)video->page[0].data;// save original mem ptr
src/lib/16_sprit.c://#define FRAME1 modexDrawSpriteRegion(pip[(pip->video->p)].page, x, y, 48, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/16_sprit.c://#define FRAME2 modexDrawSpriteRegion(pip[(pip->video->p)].page, x, y, 24, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR); stand
src/lib/16_sprit.c://#define FRAME3 modexDrawSpriteRegion(pip[(pip->video->p)].page, x, y, 0, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/16_sprit.c://#define FRAME4 modexDrawSpriteRegion(pip[(pip->video->p)].page, x, y, 24, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR); stand
src/lib/16_sprit.c:	if(!video->rss)
src/lib/16_sprit.c:		if(!video->bgps)
src/lib/16_sprit.c:				else rx = -(video->page[0].dx);
src/lib/16_sprit.c:				else ry = -(video->page[0].dy);
src/lib/16_sprit.c:			if ((rx+w) > video->page[0].width) w = video->page[0].width-rx;
src/lib/16_sprit.c:			if ((ry+h) > video->page[0].height) h = video->page[0].height-ry;
src/lib/16_sprit.c:			o2 = video->ofs.offscreen_ofs;
src/lib/16_sprit.c:			o = video->ofs.pattern_ofs + (ry * video->page[0].stridew) + (rx >> 2); // source offscreen
src/lib/16_sprit.c:			for (i=0;i < h;i++,o += video->page[0].stridew,o2 += (w >> 2)) vga_wm1_mem_block_copy(o2,o,w >> 2);
src/lib/16_sprit.c:			vga_state.vga_graphics_ram = omemptr + video->ofs.offscreen_ofs;
src/lib/16_sprit.c:			modexCopyPageRegion(&video->page[2], &video->page[0], enti->x, enti->y, 0, 0, 24, 32);
src/lib/16_sprit.c:	}else{ rx=ry=w=h=0; vga_state.vga_graphics_ram = (VGA_RAM_PTR)video->page[0].data; }
src/lib/16_sprit.c:	vga_state.vga_draw_stride_limit = (video->page[0].width + 3 - x) >> 2;//round up
src/lib/16_sprit.c:	modexClearRegion(&video->page[0], x, y, 16, 32, 1);
src/lib/16_sprit.c:	if(!video->rss)
src/lib/16_sprit.c:		if(!video->bgps)
src/lib/16_sprit.c:			o = video->ofs.offscreen_ofs; // source offscreen
src/lib/16_sprit.c:			o2 = (ry * video->page[0].stridew) + (rx >> 2); // dest visible (original stride)
src/lib/16_sprit.c:			for (i=0;i < h;i++,o += vga_state.vga_draw_stride,o2 += video->page[0].stridew) vga_wm1_mem_block_copy(o2,o,w >> 2);
src/lib/16_sprit.c:			//modexCopyPageRegion(&video->page[0], &video->page[2], 0, 0, enti->x, enti->y, 24, 32);
src/lib/16_sprit.c:	vga_state.vga_draw_stride_limit = vga_state.vga_draw_stride = video->page[0].stridew;
src/lib/16_sprit.c:	vga_state.vga_graphics_ram = video->omemptr;
src/lib/16_vl.c:	//printf("\n\n	1st vmem_remain=%u\n", video->vmem_remain);
src/lib/16_vl.c:	for(i=0; i<video->num_of_pages; i++)
src/lib/16_vl.c:		video->vmem_remain-=video->page[i].pagesize;
src/lib/16_vl.c:		//printf("		[%u], video->page[%u].pagesize=%u\n", i, i, video->page[i].pagesize);
src/lib/16_vl.c:		//printf("		[%u], vmem_remain=%u\n", i, video->vmem_remain);
src/lib/16_vl.c:	video->ofs.offscreen_ofs =	video->page[0].pagesize+video->page[1].pagesize;//(vga_state.vga_stride * vga_state.vga_height);
src/lib/16_vl.c:	video->ofs.pattern_ofs =	(uint16_t)video->page[3].data;
src/lib/16_vl.c:	video->vmem_remain=65535U;
src/lib/16_vl.c:	video->num_of_pages=0;
src/lib/16_vl.c:	(video->page[0]) = modexDefaultPage(&(video->page[0]));	video->num_of_pages++;	//video->page[0].width += (TILEWHD); video->page[0].height += (TILEWHD);
src/lib/16_vl.c:	(video->page[1]) = modexNextPage(&(video->page[0]));	video->num_of_pages++;
src/lib/16_vl.c://0000	(video->page[2]) = modexNextPageFlexibleSize(&(video->page[1]), (video->page[0]).width, TILEWH*4);		video->num_of_pages++;
src/lib/16_vl.c://0000	(video->page[3]) = (video->page[2]);		video->num_of_pages++;
src/lib/16_vl.c:////	(video->page[2]) = modexNextPageFlexibleSize(&(video->page[1]), TILEWH*4, TILEWH*4);		video->num_of_pages++;
src/lib/16_vl.c:////	(video->page[3]) = modexNextPageFlexibleSize(&(video->page[2]), video->page[0].sw, 208);	video->num_of_pages++;
src/lib/16_vl.c: 	(video->page[2]) = modexNextPageFlexibleSize(&(video->page[1]), video->page[0].width, 96);	video->num_of_pages++;
src/lib/16_vl.c: 	(video->page[3]) = modexNextPageFlexibleSize(&(video->page[2]), video->page[0].width, 96);	video->num_of_pages++;
src/lib/16_vl.c:	video->sp=video->p=0;	//showpage
src/lib/16_vl.c:	video->r=1;			//render
src/lib/16_vl.c:	video->vh=video->page[0].height+video->page[1].height+video->page[2].height+video->page[3].height;
src/lib/16_vl.c:	video->omemptr=			vga_state.vga_graphics_ram;
src/lib/16_vl.c:	video->vga_draw_stride=	vga_state.vga_draw_stride;
src/lib/16_vl.c:	video->vga_draw_stride_limit=	vga_state.vga_draw_stride_limit;
src/lib/16_vl.c:	video->rss=0;	//set to new
src/lib/16_vl.c:	video->bgps=1;	//set to old
src/lib/16_vl.c:	video->page[0].dx=video->page[0].dy=
src/lib/16_vl.c:		video->page[1].dx=video->page[1].dy=TILEWH;	// 1 tile size buffer
src/lib/16_vl.c:	video->page[2].dx=video->page[2].dy=
src/lib/16_vl.c:		video->page[3].dx=video->page[3].dy=0;		// cache pages are buffer wwww
src/lib/16_vl.c:					h=video->vh;
src/lib/16_vl.c:			w=video->page[pn].width;
src/lib/16_vl.c:			d=(0x10000UL - (uint16_t)video->page[pn].data);
src/lib/16_vl.c:			s=video->page[pn].stridew;
src/lib/16_vl.c:					h=video->page[pn].height;
src/lib/16_vl.c:					if(!pn) h=video->vh;
src/lib/16_vl.c:					else h=video->page[pn].height;
src/lib/scroll16.c:			//0000pip[0].video->startclk = (*clockw);
src/lib/scroll16.c:					mapScrollRight(pip, player, (pip[0].video->p), pn);
src/lib/scroll16.c:					//0000pip[0].video->clk = ((*clockw)-pip[0].video->startclk)/18.2;
src/lib/scroll16.c:					mapScrollLeft(pip, player, (pip[0].video->p), pn);
src/lib/scroll16.c:					//0000pip[0].video->clk = ((*clockw)-pip[0].video->startclk)/18.2;
src/lib/scroll16.c:					mapScrollDown(pip, player, (pip[0].video->p), pn);
src/lib/scroll16.c:					//0000pip[0].video->clk = ((*clockw)-pip[0].video->startclk)/18.2;
src/lib/scroll16.c:					mapScrollUp(pip, player, (pip[0].video->p), pn);
src/lib/scroll16.c:					//0000pip[0].video->clk = ((*clockw)-pip[0].video->startclk)/18.2;
src/lib/scroll16.c:	//VL_ShowPage(moo[moo[0].video->sp].page, vsync, sr);
src/lib/scroll16.c:	offset = (word) moo[moo[0].video->sp].page->data;
src/lib/scroll16.c:			crtcOffset = moo[moo[0].video->sp].page->sw >> 3;
src/lib/scroll16.c:			if(mv[0].video->bgps)
src/lib/scroll16.c:	mv[0].video->r=1;
src/lib/scroll16.c:			if(mv[0].video->bgps)
src/lib/scroll16.c:	mv[0].video->r=1;
src/lib/scroll16.c:			if(mv[0].video->bgps)
src/lib/scroll16.c:	mv[0].video->r=1;
src/lib/scroll16.c:			if(mv[0].video->bgps)
src/lib/scroll16.c:	mv[0].video->r=1;
src/lib/scroll16.c:	if(mv[0].video->bgps) modexCopyPageRegion(mv[1].page, mv[0].page, 0, 0, 0, 0, mv[0].page->width, mv[0].page->height);
src/lib/scroll16.c://	modexCopyPageRegion(&(gv->video.page[gv->video->sfip]), &(gv->video.page[!gv->video->sfip]), x, y, x+w, 0, w, h);
src/lib/scroll16.c:// 	o2 =	*(gv->video.page[gv->video->sfip].data)+(y * vga_state.vga_stride) + (x >> 2); // dest visible (original stride)
src/lib/scroll16.c:		//modexClearRegion(&(gv->video.page[gv->video->sfip]), x, y, w, h, 45);
src/lib/scroll16.c:// 		o =	*(gv->video.page[gv->video->sfip].data); // source offscreen
src/lib/scroll16.c://		modexCopyPageRegion(&(gv->video.page[gv->video->sfip]), &(gv->video.page[!gv->video->sfip]), x, y, x, 0, w, h);
src/lib/scroll16.c:			//modexprint(&(gv->video.page[gv->video->sfip]), x, y+8, type, col, bgcol, "sanic!");
src/lib/scroll16.c:			//modexCopyPageRegion(&video->page[0], &video->page[1], enti->x, enti->y, 0, 0, 24, 32);
src/lib/scroll16.c:	switch(pip[0].video->rss)
src/lib/scroll16.c:#define FRAME1 modexDrawSpriteRegion(pip[/*!*/(pip->video->p)].page, x, y, 48, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/scroll16.c:#define FRAME2 modexDrawSpriteRegion(pip[/*!*/(pip->video->p)].page, x, y, 24, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/scroll16.c:#define FRAME3 modexDrawSpriteRegion(pip[/*!*/(pip->video->p)].page, x, y, 0, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/scroll16.c:#define FRAME4 modexDrawSpriteRegion(pip[/*!*/(pip->video->p)].page, x, y, 24, player[pn].enti.dire, 24, 32,	PLAYERBMPDATAPTR);
src/lib/scroll16.c:#define FRAME1 modexClearRegion(pip[/*!*/(pip->video->p)].page, x, y, 16, 32, 2+player[pn].enti.dire);
src/lib/scroll16.c:#define FRAME2 modexClearRegion(pip[/*!*/(pip->video->p)].page, x, y, 16, 32, 1+player[pn].enti.dire);
src/lib/scroll16.c:#define FRAME3 modexClearRegion(pip[/*!*/(pip->video->p)].page, x, y, 16, 32, player[pn].enti.dire);
src/lib/scroll16.c:#define FRAME4 modexClearRegion(pip[/*!*/(pip->video->p)].page, x, y, 16, 32, 1+player[pn].enti.dire);
src/lib/scroll16.c:	if(pip[0].video->bgps) modexCopyPageRegion(pip[0].page, pip[1].page, x-4, y-4, x-4, y-4, 28, 36);
src/lib/scroll16.c:	//modexCopyPageRegion(pip[3].page, pip[!(pip->video->p)].page, x-4, y-4, 0, 128, 28, 36);
src/lib/scroll16.c:	/*modexCopyPageRegion(pip[pip->video->p].page,
src/lib/scroll16.c: pip[!(pip->video->p)].page, x-4, y-4, x-4, y-4, 28, 36);*/
src/lib/scroll16.c:	pip->video->r=1;
src/lib/scroll16.c:		set_anim_by_id(player[pn].enti.spri, player[pn].enti.dire); //pip->video->sprifilei = set_anim_by_id(player[pn].enti.spri, player[pn].enti.dire);	if(pip->video->sprifilei == -1){ printf("ERROR!	%u\n", player[pn].enti.dire); return; }
src/lib/scroll16.c:	pip->video->r=1;
src/lib/scroll16.c:	mv->video->r=1;
