16/keen/id_ca.c:byte 		_seg	*tinf;
16/keen/id_ca.c:unsigned	_seg	*mapsegs[3];
16/keen/id_ca.c:maptype		_seg	*mapheaderseg[NUMMAPS];
16/keen/id_ca.c:byte		_seg	*audiosegs[NUMSNDCHUNKS];
16/keen/id_ca.c:void		_seg	*grsegs[NUMCHUNKS];
16/keen/id_ca.c:long		_seg *grstarts;	// array of offsets in egagraph, -1 for sparse
16/keen/id_ca.c:long		_seg *audiostarts;	// array of offsets in audio / audiot

16/keen/id_rf.c:	spritetype _seg	*block;
16/keen/id_rf.c:	block = (spritetype _seg *)grsegs[spritenumber];
16/keen/id_rf.c:	spritetype _seg	*block;
16/keen/id_rf.c:	block = (spritetype _seg *)grsegs[spritenumber];

16/keen/id_vw.c:pictabletype	_seg *pictable;
16/keen/id_vw.c:pictabletype	_seg *picmtable;
16/keen/id_vw.c:spritetabletype _seg *spritetable;

16/keen/id_vw.c:	spritetype _seg	*block;
16/keen/id_vw.c:	spritetype _seg	*block;
16/keen/id_vw.c:	block = (spritetype _seg *)grsegs[chunknum];

16/keen/kd_keen.c:	spritetype	_seg	*block;
16/keen/kd_keen.c:	block = (spritetype _seg *)grsegs[SCOREBOXSPR];
16/keen/kd_keen.c:	spritetype _seg *dest;
16/keen/kd_keen.c:	dest = (spritetype _seg *)grsegs[SCOREBOXSPR];
16/keen/kd_keen.c:	spritetype	_seg	*block;
16/keen/kd_keen.c:		block = (spritetype _seg *)grsegs[SCOREBOXSPR];
16/keen/kd_keen.c:		block = (spritetype _seg *)grsegs[SCOREBOXSPR];
16/keen/kd_keen.c:		block = (spritetype _seg *)grsegs[SCOREBOXSPR];
16/keen/kd_keen.c:			tile = *((unsigned _seg *)mapsegs[2]+mapbwidthtable[y]/2+x);
16/keen/kd_keen.c:		map = (unsigned _seg *)mapsegs[1]+
16/keen/kd_keen.c:		map = (unsigned _seg *)mapsegs[1]+
16/keen/kd_keen.c:	map = (unsigned _seg *)mapsegs[1]+mapbwidthtable[ob->tiletop]/2+ob->temp4;
16/keen/kd_keen.c:	map = (unsigned _seg *)mapsegs[1]+mapbwidthtable[ob->tilebottom]/2+ob->temp4;
16/keen/kd_main.c:	spritetype _seg	*block;
16/keen/kd_main.c:		block = (spritetype _seg *)grsegs[sprite];




16/wf3d8086/contigsc.c:byte _seg	*endscalermemory;
16/wf3d8086/contigsc.c:	endscalermemory = (void _seg *)(seg+ofs/16);
16/wf3d8086/contigsc.c:	t_compshape	_seg *shape;
16/wf3d8086/contigsc.c:	t_compshape	_seg *shape;
16/wf3d8086/id_ca.c:byte 		_seg	*tinf;
16/wf3d8086/id_ca.c:unsigned	_seg	*mapsegs[MAPPLANES];
16/wf3d8086/id_ca.c:maptype		_seg	*mapheaderseg[NUMMAPS];
16/wf3d8086/id_ca.c:byte		_seg	*audiosegs[NUMSNDCHUNKS];
16/wf3d8086/id_ca.c:void		_seg	*grsegs[NUMCHUNKS];
16/wf3d8086/id_ca.c:long		_seg *grstarts;	// array of offsets in egagraph, -1 for sparse
16/wf3d8086/id_ca.c:long		_seg *audiostarts;	// array of offsets in audio / audiot

16/wf3d8086/id_pm.c:					_seg *PMSegPages;
16/wf3d8086/id_pm.c:	void			_seg *buf;
16/wf3d8086/id_pm.c:		MM_FreePtr(&(void _seg *)PMSegPages);

16/wf3d8086/id_vh.c:pictabletype	_seg *pictable;
16/wf3d8086/id_vh.c:	byte		_seg *temp, far *dest, far *srcline;
16/wf3d8086/id_vh.c:	src = (byte _seg *)grsegs[STARTTILE8];
16/wf3d8086/id_vh.c:	src = (byte _seg *)grsegs[STARTTILE16];
16/wf3d8086/id_vh.c:		src = (byte _seg *)grsegs[STARTTILE16+i];
16/wf3d8086/wl_debug.c:	spritetype _seg	*block;
16/wf3d8086/wl_debug.c:extern	word	_seg *DigiList;
16/wf3d8086/wl_menu.c:	fontstruct _seg *font;
16/wf3d8086/wl_scale.c:t_compscale _seg *scaledirectory[MAXSCALEHEIGHT+1];
16/wf3d8086/wl_scale.c:t_compscale 	_seg *work;
16/wf3d8086/wl_scale.c:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/wf3d8086/wl_scale.c:	t_compshape	_seg *shape;
16/wf3d8086/wl_scale.c:	t_compscale _seg *comptable;
16/wf3d8086/wl_scale.c:	t_compshape	_seg *shape;
16/wf3d8086/wl_scale.c:	t_compscale _seg *comptable;
16/wf3d8086/wl_text.c:	text = (char _seg *)grsegs[artnum];
16/wf3d8086/wl_text.c:	text = (char _seg *)layout;
16/wf3d8086/wl_text.c:	text = (char _seg *)grsegs[artnum];
16/wf3d8086/wl_text.c:	text = (char _seg *)layout;
16/wolf3d/WOLFSRC/CONTIGSC.C:byte _seg	*endscalermemory;
16/wolf3d/WOLFSRC/CONTIGSC.C:	endscalermemory = (void _seg *)(seg+ofs/16);
16/wolf3d/WOLFSRC/CONTIGSC.C:	t_compshape	_seg *shape;
16/wolf3d/WOLFSRC/CONTIGSC.C:	t_compshape	_seg *shape;
16/wolf3d/WOLFSRC/ID_CA.C:byte 		_seg	*tinf;
16/wolf3d/WOLFSRC/ID_CA.C:unsigned	_seg	*mapsegs[MAPPLANES];
16/wolf3d/WOLFSRC/ID_CA.C:maptype		_seg	*mapheaderseg[NUMMAPS];
16/wolf3d/WOLFSRC/ID_CA.C:byte		_seg	*audiosegs[NUMSNDCHUNKS];
16/wolf3d/WOLFSRC/ID_CA.C:void		_seg	*grsegs[NUMCHUNKS];
16/wolf3d/WOLFSRC/ID_CA.C:long		_seg *grstarts;	// array of offsets in egagraph, -1 for sparse
16/wolf3d/WOLFSRC/ID_CA.C:long		_seg *audiostarts;	// array of offsets in audio / audiot
16/wolf3d/WOLFSRC/ID_CA.C:	grstarts = (long _seg *)FP_SEG(&EGAhead);
16/wolf3d/WOLFSRC/ID_CA.C:	tinf = (byte _seg *)FP_SEG(&maphead);
16/wolf3d/WOLFSRC/ID_CA.C:		pos = ((mapfiletype	_seg *)tinf)->headeroffsets[i];
16/wolf3d/WOLFSRC/ID_CA.C:	audiostarts = (long _seg *)FP_SEG(&audiohead);
16/wolf3d/WOLFSRC/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/wolf3d/WOLFSRC/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/wolf3d/WOLFSRC/ID_CA.C:					source = (byte _seg *)bufferseg+(pos-bufferstart);
16/wolf3d/WOLFSRC/ID_IN.C:		byte _seg	*DemoBuffer;
16/wolf3d/WOLFSRC/ID_PM.C:					_seg *PMSegPages;
16/wolf3d/WOLFSRC/ID_PM.C:	void			_seg *buf;
16/wolf3d/WOLFSRC/ID_PM.C:		MM_FreePtr(&(void _seg *)PMSegPages);
16/wolf3d/WOLFSRC/ID_SD.C:	word		*SoundTable;	// Really * _seg *SoundTable, but that don't work
16/wolf3d/WOLFSRC/ID_SD.C:		word			_seg *DigiList;
16/wolf3d/WOLFSRC/ID_VH.C:pictabletype	_seg *pictable;
16/wolf3d/WOLFSRC/ID_VH.C:	byte		_seg *temp, far *dest, far *srcline;
16/wolf3d/WOLFSRC/ID_VH.C:	, fontstruct _seg *font)
16/wolf3d/WOLFSRC/ID_VH.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONT+fontnumber]);
16/wolf3d/WOLFSRC/ID_VH.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONTM+fontnumber]);
16/wolf3d/WOLFSRC/ID_VH.C:	src = (byte _seg *)grsegs[STARTTILE8];
16/wolf3d/WOLFSRC/ID_VH.C:	src = (byte _seg *)grsegs[STARTTILE16];
16/wolf3d/WOLFSRC/ID_VH.C:		src = (byte _seg *)grsegs[STARTTILE16+i];
16/wolf3d/WOLFSRC/WL_DEBUG.C:	spritetype _seg	*block;
16/wolf3d/WOLFSRC/WL_DEBUG.C:extern	word	_seg *DigiList;
16/wolf3d/WOLFSRC/WL_MENU.C:	fontstruct _seg *font;
16/wolf3d/WOLFSRC/WL_SCALE.C:t_compscale _seg *scaledirectory[MAXSCALEHEIGHT+1];
16/wolf3d/WOLFSRC/WL_SCALE.C:t_compscale 	_seg *work;
16/wolf3d/WOLFSRC/WL_SCALE.C:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/wolf3d/WOLFSRC/WL_SCALE.C:	t_compshape	_seg *shape;
16/wolf3d/WOLFSRC/WL_SCALE.C:	t_compscale _seg *comptable;
16/wolf3d/WOLFSRC/WL_SCALE.C:	t_compshape	_seg *shape;
16/wolf3d/WOLFSRC/WL_SCALE.C:	t_compscale _seg *comptable;
16/wolf3d/WOLFSRC/WL_TEXT.C:	text = (char _seg *)grsegs[artnum];
16/wolf3d/WOLFSRC/WL_TEXT.C:	text = (char _seg *)layout;
16/wolf3d/WOLFSRC/WL_TEXT.C:	text = (char _seg *)grsegs[artnum];
16/wolf3d/WOLFSRC/WL_TEXT.C:	text = (char _seg *)layout;
16/Catacomb3D/C3_DEBUG.C:	spritetype _seg	*block;
16/Catacomb3D/C3_GAME.C:	text = (char _seg *)grsegs[LEVEL1TEXT+mapon];
16/Catacomb3D/C3_GAME.C:	src = (byte _seg *)grsegs[STARTTILE8];
16/Catacomb3D/C3_GAME.C:	src = (byte _seg *)grsegs[STARTTILE16];
16/Catacomb3D/C3_GAME.C:		src = (byte _seg *)grsegs[STARTTILE16+i];
16/Catacomb3D/C3_SCALE.C:t_compscale _seg *scaledirectory[MAXSCALE+1];
16/Catacomb3D/C3_SCALE.C:t_compshape _seg *shapedirectory[NUMSCALEPICS];
16/Catacomb3D/C3_SCALE.C:	plane0 = (byte _seg *)grsegs[picnum];
16/Catacomb3D/C3_SCALE.C:	t_compscale 	_seg *work;
16/Catacomb3D/C3_SCALE.C:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/Catacomb3D/C3_SCALE.C:unsigned BuildCompShape (t_compshape _seg **finalspot)
16/Catacomb3D/C3_SCALE.C:	t_compshape 	_seg *work;
16/Catacomb3D/C3_SCALE.C:	work = (t_compshape _seg *)(0xa000+(buff+15)/16);
16/Catacomb3D/C3_SCALE.C:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/Catacomb3D/C3_SCALE.C:void ScaleShape (int xcenter, t_compshape _seg *compshape, unsigned scale)
16/Catacomb3D/C3_SCALE.C:	t_compscale _seg *comptable;
16/Catacomb3D/C3_WIZ.C:	text = (char _seg *)grsegs[LEVEL1TEXT+mapon]+textstarts[number];
16/Catacomb3D/ID_CA.C:byte 		_seg	*tinf;
16/Catacomb3D/ID_CA.C:unsigned	_seg	*mapsegs[3];
16/Catacomb3D/ID_CA.C:maptype		_seg	*mapheaderseg[NUMMAPS];
16/Catacomb3D/ID_CA.C:byte		_seg	*audiosegs[NUMSNDCHUNKS];
16/Catacomb3D/ID_CA.C:void		_seg	*grsegs[NUMCHUNKS];
16/Catacomb3D/ID_CA.C:long		_seg *grstarts;	// array of offsets in egagraph, -1 for sparse
16/Catacomb3D/ID_CA.C:long		_seg *audiostarts;	// array of offsets in audio / audiot
16/Catacomb3D/ID_CA.C:	grstarts = (long _seg *)FP_SEG(&EGAhead);
16/Catacomb3D/ID_CA.C:	grstarts = (long _seg *)FP_SEG(&CGAhead);
16/Catacomb3D/ID_CA.C:	tinf = (byte _seg *)FP_SEG(&maphead);
16/Catacomb3D/ID_CA.C:	audiostarts = (long _seg *)FP_SEG(&audiohead);
16/Catacomb3D/ID_CA.C:	spritetype _seg *dest;
16/Catacomb3D/ID_CA.C:	dest = (spritetype _seg *)grsegs[chunk];
16/Catacomb3D/ID_CA.C:	dest = (spritetype _seg *)grsegs[chunk];
16/Catacomb3D/ID_CA.C:		pos = ((mapfiletype	_seg *)tinf)->headeroffsets[mapnum];
16/Catacomb3D/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/Catacomb3D/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/Catacomb3D/ID_CA.C:					source = (byte _seg *)bufferseg+(pos-bufferstart);
16/Catacomb3D/ID_IN.C:		byte _seg	*DemoBuffer;
16/Catacomb3D/ID_IN.C:IN_StartDemoPlayback(byte _seg *buffer,word bufsize)
16/Catacomb3D/ID_RF.C:	spritetype _seg	*block;
16/Catacomb3D/ID_RF.C:	block = (spritetype _seg *)grsegs[spritenumber];
16/Catacomb3D/ID_RF.C:	spritetype _seg	*block;
16/Catacomb3D/ID_RF.C:	block = (spritetype _seg *)grsegs[spritenumber];
16/Catacomb3D/ID_SD.C:	word		*SoundTable;	// Really * _seg *SoundTable, but that don't work
16/Catacomb3D/ID_VW.C:pictabletype	_seg *pictable;
16/Catacomb3D/ID_VW.C:pictabletype	_seg *picmtable;
16/Catacomb3D/ID_VW.C:spritetabletype _seg *spritetable;
16/Catacomb3D/ID_VW.C:		fontstruct _seg *font);
16/Catacomb3D/ID_VW.C:	spritetype _seg	*block;
16/Catacomb3D/ID_VW.C:	block = (spritetype _seg *)grsegs[chunknum];
16/Catacomb3D/ID_VW.C:VWL_MeasureString (char far *string, word *width, word *height, fontstruct _seg *font)
16/Catacomb3D/ID_VW.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONT+fontnumber]);
16/Catacomb3D/ID_VW.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONTM+fontnumber]);
16/Catacomb3D/ID_VW.C:	spritetype _seg	*block;
16/Catacomb3D/ID_VW.C:	block = (spritetype _seg *)grsegs[chunknum];
16/CatacombApocalypse/C6_GAME.C:	text = (char _seg *)grsegs[LEVEL1TEXT+mapon];
16/CatacombApocalypse/C6_GAME.C:	src = (byte _seg *)grsegs[STARTTILE8];
16/CatacombApocalypse/C6_GAME.C:	src = (byte _seg *)grsegs[STARTTILE16];
16/CatacombApocalypse/C6_GAME.C:		src = (byte _seg *)grsegs[STARTTILE16+i];
16/CatacombApocalypse/C6_SCALE.C:t_compscale _seg *scaledirectory[NUMSCALEPICS];
16/CatacombApocalypse/C6_SCALE.C:t_compshape _seg *shapedirectory[NUMSCALEPICS];
16/CatacombApocalypse/C6_SCALE.C:	plane0 = (byte _seg *)grsegs[picnum];
16/CatacombApocalypse/C6_SCALE.C:	t_compscale 	_seg *work;
16/CatacombApocalypse/C6_SCALE.C:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/CatacombApocalypse/C6_SCALE.C:unsigned BuildCompShape (t_compshape _seg **finalspot)
16/CatacombApocalypse/C6_SCALE.C:	t_compshape 	_seg *work;
16/CatacombApocalypse/C6_SCALE.C:	work = (t_compshape _seg *)(0xa000+(buff+15)/16);
16/CatacombApocalypse/C6_SCALE.C:	_fmemcpy ((byte _seg *)(*finalspot),(byte _seg *)work,totalsize);
16/CatacombApocalypse/C6_SCALE.C:void ScaleShape (int xcenter, t_compshape _seg *compshape, unsigned scale)
16/CatacombApocalypse/C6_SCALE.C:	t_compscale _seg *comptable;
16/CatacombApocalypse/C6_WIZ.C:	text = (char _seg *)grsegs[LEVEL1TEXT+mapon]+textstarts[number];
16/CatacombApocalypse/C6_WIZ.C:	txt = (char _seg *)grsegs[SCROLLTEXT];
16/CatacombApocalypse/C6_WIZ.C:	txt = (char _seg *)grsegs[SCROLLTEXT]+ofset;
16/CatacombApocalypse/GELIB.C:	fontstruct _seg *font = (fontstruct _seg *)grsegs[STARTFONT];
16/CatacombApocalypse/ID_CA.C:byte 		_seg	*tinf;
16/CatacombApocalypse/ID_CA.C:unsigned	_seg	*mapsegs[3];
16/CatacombApocalypse/ID_CA.C:maptype		_seg	*mapheaderseg[NUMMAPS];
16/CatacombApocalypse/ID_CA.C:byte		_seg	*audiosegs[NUMSNDCHUNKS];
16/CatacombApocalypse/ID_CA.C:void		_seg	*grsegs[NUMCHUNKS];
16/CatacombApocalypse/ID_CA.C:long		_seg *grstarts;	// array of offsets in egagraph, -1 for sparse
16/CatacombApocalypse/ID_CA.C:long		_seg *audiostarts;	// array of offsets in audio / audiot
16/CatacombApocalypse/ID_CA.C:	grstarts = (long _seg *)FP_SEG(&EGAhead);
16/CatacombApocalypse/ID_CA.C:	grstarts = (long _seg *)FP_SEG(&CGAhead);
16/CatacombApocalypse/ID_CA.C:	tinf = (byte _seg *)FP_SEG(&maphead);
16/CatacombApocalypse/ID_CA.C:	audiostarts = (long _seg *)FP_SEG(&audiohead);
16/CatacombApocalypse/ID_CA.C:	spritetype _seg *dest;
16/CatacombApocalypse/ID_CA.C:	dest = (spritetype _seg *)grsegs[chunk];
16/CatacombApocalypse/ID_CA.C:	dest = (spritetype _seg *)grsegs[chunk];
16/CatacombApocalypse/ID_CA.C:		pos = ((mapfiletype	_seg *)tinf)->headeroffsets[mapnum];
16/CatacombApocalypse/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/CatacombApocalypse/ID_CA.C:		((mapfiletype _seg *)tinf)->RLEWtag);
16/CatacombApocalypse/ID_CA.C:					source = (byte _seg *)bufferseg+(pos-bufferstart);
16/CatacombApocalypse/ID_IN.C://		byte _seg	*DemoBuffer;
16/CatacombApocalypse/ID_IN.C:IN_StartDemoPlayback(byte _seg *buffer,word bufsize)
16/CatacombApocalypse/ID_RF.C:	spritetype _seg	*block;
16/CatacombApocalypse/ID_RF.C:	block = (spritetype _seg *)grsegs[spritenumber];
16/CatacombApocalypse/ID_RF.C:	spritetype _seg	*block;
16/CatacombApocalypse/ID_RF.C:	block = (spritetype _seg *)grsegs[spritenumber];
16/CatacombApocalypse/ID_SD.C:	word		*SoundTable;	// Really * _seg *SoundTable, but that don't work
16/CatacombApocalypse/ID_VW.C:pictabletype	_seg *pictable;
16/CatacombApocalypse/ID_VW.C:pictabletype	_seg *picmtable;
16/CatacombApocalypse/ID_VW.C:spritetabletype _seg *spritetable;
16/CatacombApocalypse/ID_VW.C:		fontstruct _seg *font);
16/CatacombApocalypse/ID_VW.C:	spritetype _seg	*block;
16/CatacombApocalypse/ID_VW.C:	block = (spritetype _seg *)grsegs[chunknum];
16/CatacombApocalypse/ID_VW.C:VWL_MeasureString (char far *string, word *width, word *height, fontstruct _seg *font)
16/CatacombApocalypse/ID_VW.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONT+fontnumber]);
16/CatacombApocalypse/ID_VW.C:	VWL_MeasureString(string,width,height,(fontstruct _seg *)grsegs[STARTFONTM+fontnumber]);
16/CatacombApocalypse/ID_VW.C:	spritetype _seg	*block;
16/CatacombApocalypse/ID_VW.C:	block = (spritetype _seg *)grsegs[chunknum];
